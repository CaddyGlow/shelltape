name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        run: |
          rustup update stable
          rustup default stable
          rustup component add rustfmt clippy

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features

      - name: Run tests
        run: cargo test --all-features

  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runs_on: ubuntu-latest
            archive: tar.gz
            exe_suffix: ""
          - target: aarch64-unknown-linux-gnu
            runs_on: ubuntu-latest
            archive: tar.gz
            exe_suffix: ""
            apt_package: gcc-aarch64-linux-gnu
            linker: aarch64-linux-gnu-gcc
          - target: x86_64-pc-windows-gnu
            runs_on: ubuntu-latest
            archive: zip
            exe_suffix: ".exe"
            apt_package: gcc-mingw-w64-x86-64
            linker: x86_64-w64-mingw32-gcc
          - target: x86_64-apple-darwin
            runs_on: macos-latest
            archive: tar.gz
            exe_suffix: ""
          - target: aarch64-apple-darwin
            runs_on: macos-latest
            archive: tar.gz
            exe_suffix: ""
          - target: aarch64-linux-android
            runs_on: ubuntu-latest
            archive: tar.gz
            exe_suffix: ""
            android: true
            ndk_version: "26.1.10909125"
            android_api: "24"
            android_triple: "aarch64-linux-android"
    runs-on: ${{ matrix.runs_on }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        run: |
          rustup update stable
          rustup default stable
          rustup target add ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross-compilation toolchain
        if: matrix.apt_package
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_package }}
          mkdir -p .cargo
          cat >> .cargo/config.toml << EOF
          [target.${{ matrix.target }}]
          linker = "${{ matrix.linker }}"
          EOF

      - name: Install Android NDK
        if: matrix.android
        uses: android-actions/setup-android@v3
        with:
          packages: |
            ndk;${{ matrix.ndk_version }}

      - name: Configure Android linker
        if: matrix.android
        run: |
          mkdir -p .cargo
          NDK_HOME="${ANDROID_NDK_HOME:-$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_version }}}"
          echo "Using Android NDK at $NDK_HOME"
          cat >> .cargo/config.toml <<EOF
          [target.${{ matrix.target }}]
          ar = "${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.android_triple }}${{ matrix.android_api }}-clang"
          EOF
          TARGET_ENV=$(echo "${{ matrix.target }}" | tr '-' '_')
          echo "CC_${TARGET_ENV}=${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.android_triple }}${{ matrix.android_api }}-clang" >> "$GITHUB_ENV"
          echo "AR_${TARGET_ENV}=${NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> "$GITHUB_ENV"

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
          
      - name: Package artifact
        run: |
          mkdir -p dist
          BIN="shelltape"
          TARGET="${{ matrix.target }}"
          VERSION="${{ github.ref_name }}"
          if [ -z "$VERSION" ] || [ "$VERSION" = "main" ]; then
            VERSION="${{ github.sha }}"
          fi
          ARCHIVE_STEM="$BIN-$VERSION-$TARGET"
          cp "target/$TARGET/release/$BIN${{ matrix.exe_suffix }}" "dist/$BIN${{ matrix.exe_suffix }}"
          cd dist
          if [ "${{ matrix.archive }}" = "zip" ]; then
            zip "$ARCHIVE_STEM.zip" "$BIN${{ matrix.exe_suffix }}"
          else
            tar czf "$ARCHIVE_STEM.tar.gz" "$BIN${{ matrix.exe_suffix }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shelltape-${{ matrix.target }}
          path: |
            dist/*.tar.gz
            dist/*.zip

  release:
    if: always() && startsWith(github.ref, 'refs/tags/') && !cancelled()
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
        continue-on-error: true

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          fail_on_unmatched_files: false
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
